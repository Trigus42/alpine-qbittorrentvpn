#!/usr/bin/with-contenv bash
# shellcheck shell=bash

print_exit_info () {
    echo "$(date +'%Y-%m-%d %H:%M:%S') [ERROR INFO] 'ip addr show' output:"
	echo "--------------------"
	ip addr show
	echo "--------------------"
    echo "$(date +'%Y-%m-%d %H:%M:%S') [ERROR INFO] 'ip route show table main' output:"
	echo "--------------------"
	ip route show table main
	echo "--------------------"
	echo "$(date +'%Y-%m-%d %H:%M:%S') [ERROR INFO] 'ip rule' output:"
	echo "--------------------"
	ip rule
	echo "--------------------"
    echo "$(date +'%Y-%m-%d %H:%M:%S') [ERROR INFO] 'netstat -lpn' output:"
	echo "--------------------"
	netstat -lpn
	echo "--------------------"
}

# Wait until qbittorrent-nox is up
while ! (pgrep -o qbittorrent-nox >/dev/null 2>&1); do
    sleep 0.1
done
qbittorrentpid=$(pgrep -o qbittorrent-nox)
echo "$(date +'%Y-%m-%d %H:%M:%S') [INFO] qBittorrent started with PID $qbittorrentpid"


## Setup

# Set some variables that are used
DEFAULT_HOST="one.one.one.one"
DEFAULT_INTERVAL=5
DEFAULT_TIMEOUT=5


# If HOST is zero (not set) use DEFAULT_HOST
if [[ -z "${HOST}" ]]; then
    echo "$(date +'%Y-%m-%d %H:%M:%S') [INFO] HEALTH_CHECK_HOST is not set. Using default host ${DEFAULT_HOST}"
    HOST=${DEFAULT_HOST}
fi

# If HEALTH_CHECK_INTERVAL is zero (not set) use DEFAULT_INTERVAL
if [[ -z "${HEALTH_CHECK_INTERVAL}" ]]; then
    echo "$(date +'%Y-%m-%d %H:%M:%S') [INFO] HEALTH_CHECK_INTERVAL is not set. Using default interval of ${DEFAULT_INTERVAL}s"
    HEALTH_CHECK_INTERVAL=${DEFAULT_INTERVAL}
fi

# If HEALTH_CHECK_TIMEOUT is zero (not set) use DEFAULT_TIMEOUT
if [[ -z "${HEALTH_CHECK_TIMEOUT}" ]]; then
    echo "$(date +'%Y-%m-%d %H:%M:%S') [INFO] HEALTH_CHECK_TIMEOUT is not set. Using default interval of ${DEFAULT_TIMEOUT}s"
    HEALTH_CHECK_TIMEOUT=${DEFAULT_TIMEOUT}
fi


## Run

while :; do
    if [[ $VPN_ENABLED != "no" ]]; then
        # Check if it is possible to bypass the VPN
        if (ping -I "$DOCKER_INTERFACE" -c 1 "$HOST" > /dev/null 2>&1) || (ping -I "$DOCKER_INTERFACE" -c 1 "8.8.8.8" > /dev/null 2>&1); then
            echo "$(date +'%Y-%m-%d %H:%M:%S') [ERROR] Firewall is down! Exiting.."
            print_exit_info
            exit 1
        fi
    fi

    # Check if HEALTH_CHECK_HOST is reachable
    start_time=$(date +%s)
    if ! (ping -c 1 $HOST > /dev/null 2>&1); then
        echo "$(date +'%Y-%m-%d %H:%M:%S') [NOTICE] Network seems to be down. Retrying.."
        while :; do
            if [[ "$(date +%s) - $start_time" -lt $HEALTH_CHECK_TIMEOUT ]]; then
                if (ping -c 1 $HOST > /dev/null 2>&1); then
                    echo "$(date +'%Y-%m-%d %H:%M:%S') [NOTICE] Network connection restored"
                    break
                fi
            else
                echo "$(date +'%Y-%m-%d %H:%M:%S') [ERROR] Network is down. Exiting.."
                exit 1
            fi
        done
    fi

    sleep ${HEALTH_CHECK_INTERVAL}
done
